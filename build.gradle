plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'maven'
	id "com.github.johnrengelman.shadow" version "6.1.0"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	/*
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
		name = "Custom Portal Api"
		url = "https://dl.bintray.com/kyrptonaught/customportalapi"
		name = "GeckoLib"
		url = "https://repo.repsy.io/mvn/gandiber/geckolib"
	}

	 */
	maven {
		url "https://repo.repsy.io/mvn/gandiber/geckolib"
	}
	maven {
		url "https://dl.bintray.com/kyrptonaught/customportalapi"
	}
	maven { url 'https://maven.blamejared.com' }
	maven { url 'https://jitpack.io' }
	maven { url "https://www.cursemaven.com" }
}

configurations {
	// configuration that holds jars to include in the jar
	extraLibs

}

dependencies {
	minecraft "com.mojang:minecraft:1.16.5"
	mappings "net.fabricmc:yarn:1.16.5+build.3:v2"
	//Fabric api
	modImplementation "net.fabricmc:fabric-loader:0.11.1"

	modImplementation "net.fabricmc.fabric-api:fabric-api:0.30.0+1.16"
	//extraLibs "software.bernie.geckolib:fabric-1.16.5-geckolib:3.0.7:dev"
	// To change the versions see the gradle.properties file
	//minecraft "com.mojang:minecraft:${project.minecraft_version}"
	//modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation 'software.bernie.geckolib:fabric-1.16.5-geckolib:3.0.10:dev'
	//include "software.bernie.geckolib:fabric-1.16.5-geckolib:3.0.7:dev"
	//include "curse.maven:geckolib-398667:3150537"
	//modImplementation 'net.kyrptonaught:customportalapi:0.0.1-beta20-1.16'
	//include 'net.kyrptonaught:customportalapi:0.0.1-beta20-1.16'
	//implementation 'com.github.Virtuoel:Pehkui:1.16.4-SNAPSHOT'

	// Fabric API. This is technically optional, but you probably want it anyway.
	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	//modImplementation fileTree(dir: 'lib', include: ['*.jar'])
}

jar {
	from {
		configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {

			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// ensure that the encoding is set to UTF-8, no matter what the system default is
		// this fixes some edge cases with special characters not displaying correctly
		// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
		// If Javadoc is generated, this must be specified in that task too.
		it.options.encoding = "UTF-8"

		// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
		// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
		// We'll use that if it's available, but otherwise we'll use the older option.
		def targetVersion = 8
		if (JavaVersion.current().isJava9Compatible()) {
			it.options.release = targetVersion
		}
	}

	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}" }
		}
	}

// configure the maven publication
	publishing {
		publications {
			mavenJava(MavenPublication) {
				// add all the jars that should be included when publishing to maven
				artifact(remapJar) {
					builtBy remapJar
				}
				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		// Select the repositories you want to publish to
		// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
		repositories {
			// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		}
	}
}